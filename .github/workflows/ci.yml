name: CI-CD

on:
  push:
    branches: ["rollback-portfix","master"]
  workflow_dispatch:

jobs:
  test_backend:
    name: Run .NET Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'   # or 8.0.x, depending on your project

      - name: Restore dependencies
        run: dotnet restore ./api/Verisys.Api.UnitTests/Verisys.Api.UnitTests.csproj

      - name: Run tests
        run: dotnet test ./api/Verisys.Api.UnitTests/Verisys.Api.UnitTests.csproj --no-build --verbosity normal
  test_frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Node & cache for faster installs
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/verisys-web/package-lock.json

      - name: Install deps (frontend)
        working-directory: web/verisys-web
        run: npm ci

      - name: Run frontend tests
        env:
          CI: "true"          # makes Vitest/Jest run once + fail fast in CI
        working-directory: web/verisys-web
        run: |
          # Prefer package.json "test" script; falls back to vitest if needed
          if npm run | grep -q "^  test"; then
            npm test -- --run
          else
            npx vitest run
          fi
  build_and_push:
    needs: [test_backend, test_frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE }}
          tags: |
            type=sha,format=long        # => sha-<full_sha>
            type=raw,value=latest

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  deploy_test:
    needs: build_and_push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Point TEST to new image (sha tag)
        run: |
          IMG="docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE }}:sha-${{ github.sha }}"
          az webapp config container set \
            --resource-group "${{ vars.RG_TEST }}" \
            --name "${{ vars.APP_NAME }}-test" \
            --container-image-name "$IMG" \
            --container-registry-url https://index.docker.io \
            --container-registry-user "${{ secrets.DOCKERHUB_USERNAME }}" \
            --container-registry-password "${{ secrets.DOCKERHUB_TOKEN }}"

      - name: Configure TEST app settings (DB + port)
        run: |
          az webapp config appsettings set \
            --resource-group "${{ vars.RG_TEST }}" \
            --name "${{ vars.APP_NAME }}-test" \
            --settings \
              "ConnectionStrings__Default=${{ secrets.DB_CONNECTION_STRING }}" \
              WEBSITES_PORT=${{ vars.PORT }} \
              PORT=${{ vars.PORT }} \
              ASPNETCORE_URLS="http://0.0.0.0:${{ vars.PORT }}" \
              WEBSITES_ENABLE_APP_SERVICE_STORAGE=false

      - name: Restart TEST
        run: az webapp restart --resource-group "${{ vars.RG_TEST }}" --name "${{ vars.APP_NAME }}-test"

      - name: Health check (TEST)
        run: |
          URL="https://${{ vars.APP_NAME }}-test.azurewebsites.net/healthz"
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            echo "Attempt $i -> HTTP $code"
            [ "$code" = "200" ] && exit 0
            sleep 5
          done
          echo "Failed to reach 200 at $URL"
          exit 1

  deploy_staging:
    needs: deploy_test
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Point STAGING to new image (sha tag)
        run: |
          IMG="docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE }}:sha-${{ github.sha }}"
          az webapp config container set \
            --resource-group "${{ vars.RG_PROD }}" \
            --name "${{ vars.APP_NAME }}" \
            --slot staging \
            --container-image-name "$IMG" \
            --container-registry-url https://index.docker.io \
            --container-registry-user "${{ secrets.DOCKERHUB_USERNAME }}" \
            --container-registry-password "${{ secrets.DOCKERHUB_TOKEN }}"

      - name: Configure STAGING app settings (DB + port)
        run: |
          az webapp config appsettings set \
            --resource-group "${{ vars.RG_PROD }}" \
            --name "${{ vars.APP_NAME }}" \
            --slot staging \
            --settings \
              "ConnectionStrings__Default=${{ secrets.DB_CONNECTION_STRING }}" \
              WEBSITES_PORT=${{ vars.PORT }} \
              PORT=${{ vars.PORT }} \
              ASPNETCORE_URLS="http://0.0.0.0:${{ vars.PORT }}" \
              WEBSITES_ENABLE_APP_SERVICE_STORAGE=false

      - name: Restart STAGING
        run: az webapp restart --resource-group "${{ vars.RG_PROD }}" --name "${{ vars.APP_NAME }}" --slot staging

      - name: Health check (STAGING)
        run: |
          URL="https://${{ vars.APP_NAME }}-staging.azurewebsites.net/healthz"
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            echo "Attempt $i -> HTTP $code"
            [ "$code" = "200" ] && exit 0
            sleep 5
          done
          echo "Failed to reach 200 at $URL"
          exit 1

  swap_to_prod:
    needs: deploy_staging
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Swap STAGING â†’ PRODUCTION
        run: |
          az webapp deployment slot swap \
            --resource-group "${{ vars.RG_PROD }}" \
            --name "${{ vars.APP_NAME }}" \
            --slot staging --target-slot production

      - name: Post-swap health
        run: |
          URL="https://${{ vars.APP_NAME }}.azurewebsites.net/healthz"
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            echo "Attempt $i -> HTTP $code"
            [ "$code" = "200" ] && exit 0
            sleep 5
          done
          echo "Failed to reach 200 at $URL"
          exit 1
